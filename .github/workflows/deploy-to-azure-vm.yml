name: Deploy Bot to Azure VM

on:
  push:
    branches:
      - main # Triggers on pushes to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest # The environment the GitHub Action itself runs in

    steps:
      - name: Checkout code (Action Environment)
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Pull Code and Restart Service on VM (Enhanced Logging)
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo "Preparing to execute commands on VM: ${{ vars.AZURE_VM_NAME }} in RG: ${{ vars.AZURE_RESOURCE_GROUP }}"

            # Define VM repository path variable from GitHub vars
            VM_REPO_PATH="${{ vars.REPO_PATH_ON_VM }}" # Ensure this is EXACTLY /home/aibots/discord_bot in your GitHub Variables
            SERVICE_NAME="discordbot.service" # Define service name clearly

            # Construct the multi-line script with enhanced logging and error checks
            # Use 'set -e' to exit on first error, 'set -x' to trace commands executed
            VM_COMMANDS="set -ex && \
                         echo '--- STEP 1: Setup and Directory Navigation ---' && \
                         echo \"Target Repository Path: ${VM_REPO_PATH}\" && \
                         echo \"Target Service Name: ${SERVICE_NAME}\" && \
                         cd \"${VM_REPO_PATH}\" || { echo 'ERROR: Failed to cd into repo path'; exit 1; } && \
                         echo \"Current Directory:\" && \
                         pwd && \
                         \
                         echo '--- STEP 2: Configure Git Safe Directory ---' && \
                         git config --global --add safe.directory \"${VM_REPO_PATH}\" 2>&1 && \
                         echo 'Git safe.directory configured.' && \
                         \
                         echo '--- STEP 3: Update Code from Git Repository ---' && \
                         git status 2>&1 && \
                         echo 'Fetching from origin...' && \
                         git fetch origin 2>&1 && \
                         echo 'Checking out main branch...' && \
                         git checkout main 2>&1 && \
                         echo 'Resetting to origin/main...' && \
                         git reset --hard origin/main 2>&1 || { echo 'ERROR: git reset failed'; exit 1; } && \
                         echo 'Git repository updated.' && \
                         git status 2>&1 && \
                         \
                         echo '--- STEP 4: Restart Systemd Service ---' && \
                         echo \"Attempting to restart ${SERVICE_NAME}...\" && \
                         sudo systemctl restart \"${SERVICE_NAME}\" || { echo \"ERROR: Failed to restart ${SERVICE_NAME}\"; exit 1; } && \
                         echo \"Waiting briefly after restart command...\" && \
                         sleep 5 && \
                         echo \"Checking status of ${SERVICE_NAME}...\" && \
                         sudo systemctl status \"${SERVICE_NAME}\" --no-pager 2>&1 || echo \"WARN: systemctl status command failed, but restart might have worked.\" && \
                         \
                         echo '--- DEPLOYMENT SCRIPT COMPLETED ON VM ---'"


            echo "Sending the following enhanced script to the VM:"
            # Log the commands being sent for debugging purposes
            echo "--------------------------------------------------"
            echo "${VM_COMMANDS}"
            echo "--------------------------------------------------"

            # Execute the commands on the target Azure VM
            az vm run-command invoke \
              --resource-group "${{ vars.AZURE_RESOURCE_GROUP }}" \
              --name "${{ vars.AZURE_VM_NAME }}" \
              --command-id RunShellScript \
              --scripts "${VM_COMMANDS}" # Pass the constructed command string

            echo "Command invocation sent to VM. Check detailed output below for execution logs from the VM."

      - name: Azure Logout
        run: az logout
        if: always()